"""
Or√ßa Interiores SaaS - Aplica√ß√£o Principal
Sistema Profissional de Or√ßamento de Marcenaria
Desenvolvido por um dos melhores programadores do mundo
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json
import logging

# Imports dos m√≥dulos
from config import Config
from auth_manager import AuthManager
from orcamento_engine import OrcamentoEngine
from file_analyzer import FileAnalyzer

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√£o da p√°gina
st.set_page_config(**Config.get_page_config())

# CSS customizado
st.markdown(Config.get_css_styles(), unsafe_allow_html=True)

# Inicializar componentes
@st.cache_resource
def init_components():
    """Inicializa componentes do sistema"""
    try:
        auth_manager = AuthManager()
        orcamento_engine = OrcamentoEngine()
        file_analyzer = FileAnalyzer()
        return auth_manager, orcamento_engine, file_analyzer
    except Exception as e:
        st.error(f"Erro na inicializa√ß√£o: {e}")
        st.stop()

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    try:
        # Inicializar componentes
        auth_manager, orcamento_engine, file_analyzer = init_components()
        
        # Header principal
        st.markdown(f"""
        <div class="main-header fade-in">
            <h1>{Config.APP_NAME}</h1>
            <p>{Config.APP_DESCRIPTION}</p>
            <p><strong>Vers√£o {Config.APP_VERSION} - Sistema SaaS Profissional</strong></p>
        </div>
        """, unsafe_allow_html=True)
        
        # Verificar autentica√ß√£o
        if 'usuario_logado' not in st.session_state or st.session_state.usuario_logado is None:
            mostrar_tela_login(auth_manager)
        else:
            mostrar_aplicacao_principal(auth_manager, orcamento_engine, file_analyzer)
            
    except Exception as e:
        logger.error(f"Erro na aplica√ß√£o principal: {e}")
        st.error("Erro interno da aplica√ß√£o. Tente recarregar a p√°gina.")

def mostrar_tela_login(auth_manager: AuthManager):
    """Exibe tela de login e registro"""
    
    # Informa√ß√µes de demonstra√ß√£o
    st.markdown("""
    <div class="success-card">
        <h3>üéØ Contas Demo Dispon√≠veis</h3>
        <p><strong>Usu√°rio Demo:</strong> demo@orcainteriores.com / demo123 (Plano Pro)</p>
        <p><strong>Arquiteto:</strong> arquiteto@teste.com / arq123 (Plano B√°sico)</p>
        <p><strong>Marceneiro:</strong> marceneiro@teste.com / marc123 (Plano Enterprise)</p>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs(["üö™ Login", "üìù Criar Conta", "üíé Planos"])
    
    with tab1:
        mostrar_formulario_login(auth_manager)
    
    with tab2:
        mostrar_formulario_registro(auth_manager)
    
    with tab3:
        mostrar_planos()

def mostrar_formulario_login(auth_manager: AuthManager):
    """Formul√°rio de login"""
    st.markdown("### üîê Acesso ao Sistema")
    
    with st.form("form_login"):
        email = st.text_input("üìß Email", value="demo@orcainteriores.com")
        senha = st.text_input("üîí Senha", type="password", value="demo123")
        
        col1, col2 = st.columns([1, 1])
        with col1:
            login_btn = st.form_submit_button("üöÄ Entrar", type="primary", use_container_width=True)
        with col2:
            if st.form_submit_button("üîÑ Limpar", use_container_width=True):
                st.rerun()
        
        if login_btn:
            if email and senha:
                usuario = auth_manager.autenticar_usuario(email, senha)
                if usuario:
                    st.session_state.usuario_logado = usuario
                    st.success("‚úÖ Login realizado com sucesso!")
                    st.rerun()
                else:
                    st.error("‚ùå Email ou senha incorretos")
            else:
                st.error("‚ö†Ô∏è Preencha todos os campos")

def mostrar_formulario_registro(auth_manager: AuthManager):
    """Formul√°rio de registro"""
    st.markdown("### üìù Criar Nova Conta")
    
    with st.form("form_registro"):
        col1, col2 = st.columns(2)
        
        with col1:
            nome = st.text_input("üë§ Nome Completo *")
            email = st.text_input("üìß Email *")
            empresa = st.text_input("üè¢ Empresa")
        
        with col2:
            senha = st.text_input("üîí Senha *", type="password")
            telefone = st.text_input("üì± Telefone")
            plano = st.selectbox("üíé Plano Inicial", 
                               options=['free', 'basic'], 
                               format_func=lambda x: Config.PLANOS[x]['nome'])
        
        aceito_termos = st.checkbox("Aceito os termos de uso e pol√≠tica de privacidade")
        
        if st.form_submit_button("‚ú® Criar Conta", type="primary", use_container_width=True):
            if nome and email and senha and aceito_termos:
                sucesso = auth_manager.criar_usuario(
                    email=email,
                    nome=nome,
                    senha=senha,
                    plano=plano,
                    empresa=empresa,
                    telefone=telefone
                )
                
                if sucesso:
                    st.success("‚úÖ Conta criada com sucesso! Fa√ßa login para continuar.")
                else:
                    st.error("‚ùå Email j√° cadastrado ou erro interno")
            else:
                st.error("‚ö†Ô∏è Preencha os campos obrigat√≥rios e aceite os termos")

def mostrar_planos():
    """Exibe informa√ß√µes dos planos"""
    st.markdown("### üíé Planos de Assinatura")
    
    cols = st.columns(len(Config.PLANOS))
    
    for i, (plano_id, plano_info) in enumerate(Config.PLANOS.items()):
        with cols[i]:
            preco_texto = "Gratuito" if plano_info['preco'] == 0 else f"R$ {plano_info['preco']:.2f}/m√™s"
            projetos_texto = "Ilimitado" if plano_info['projetos_mes'] == 999999 else f"{plano_info['projetos_mes']} projetos/m√™s"
            
            st.markdown(f"""
            <div class="plan-card">
                <h3>{plano_info['nome']}</h3>
                <h2 style="color: {Config.CORES['primaria']};">{preco_texto}</h2>
                <p><strong>{projetos_texto}</strong></p>
                <ul>
            """, unsafe_allow_html=True)
            
            for recurso in plano_info['recursos']:
                st.markdown(f"<li>{recurso}</li>", unsafe_allow_html=True)
            
            st.markdown("</ul></div>", unsafe_allow_html=True)

def mostrar_aplicacao_principal(auth_manager: AuthManager, orcamento_engine: OrcamentoEngine, file_analyzer: FileAnalyzer):
    """Aplica√ß√£o principal ap√≥s login"""
    usuario = st.session_state.usuario_logado
    
    # Sidebar com informa√ß√µes do usu√°rio
    with st.sidebar:
        stats = auth_manager.criar_dashboard_usuario(usuario)
        
        st.markdown("---")
        st.markdown("### üí∞ Pre√ßos L√©o Madeiras")
        for material, info in Config.PRECOS_MATERIAIS.items():
            st.markdown(f"**{material}:** R$ {info['preco_m2']:.2f}/m¬≤")
        st.caption(f"Atualizado: {datetime.now().strftime('%d/%m/%Y')}")
        
        st.markdown("---")
        if st.button("üö™ Sair", type="secondary", use_container_width=True):
            st.session_state.usuario_logado = None
            st.rerun()
    
    # Verificar limite de projetos
    if not auth_manager.verificar_limite_projetos(usuario):
        st.error(f"""
        ‚ö†Ô∏è **Limite de projetos atingido!**
        
        Voc√™ j√° utilizou todos os {Config.PLANOS[usuario['plano']]['projetos_mes']} projetos do seu plano {Config.PLANOS[usuario['plano']]['nome']}.
        
        Fa√ßa upgrade para continuar usando o sistema.
        """)
        return
    
    # √Årea principal
    mostrar_interface_upload(auth_manager, orcamento_engine, file_analyzer, usuario)

def mostrar_interface_upload(auth_manager: AuthManager, orcamento_engine: OrcamentoEngine, 
                           file_analyzer: FileAnalyzer, usuario: Dict):
    """Interface de upload e an√°lise"""
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìÅ Upload de Projeto 3D")
        
        uploaded_file = st.file_uploader(
            "Escolha um arquivo 3D",
            type=Config.ALLOWED_EXTENSIONS,
            help=f"Formatos suportados: {', '.join(Config.ALLOWED_EXTENSIONS).upper()} (m√°x. {Config.MAX_FILE_SIZE_MB}MB)"
        )
        
        if uploaded_file:
            # Mostrar informa√ß√µes do arquivo
            st.markdown(f"""
            <div class="success-card">
                <strong>‚úÖ Arquivo:</strong> {uploaded_file.name}<br>
                <strong>üìè Tamanho:</strong> {uploaded_file.size / 1024:.1f} KB<br>
                <strong>üîß Formato:</strong> {uploaded_file.name.split('.')[-1].upper()}
            </div>
            """, unsafe_allow_html=True)
        
        # Configura√ß√µes do projeto
        st.markdown("#### ‚öôÔ∏è Configura√ß√µes do Projeto")
        
        col_a, col_b = st.columns(2)
        
        with col_a:
            cliente = st.text_input("üë§ Cliente", placeholder="Nome do cliente")
            ambiente = st.selectbox("üè† Ambiente", 
                ["Cozinha", "Quarto", "Sala", "Banheiro", "Escrit√≥rio", "Lavanderia", "Closet"])
            material = st.selectbox("ü™µ Material", list(Config.PRECOS_MATERIAIS.keys()))
        
        with col_b:
            qualidade_acessorios = st.selectbox("üîß Qualidade Acess√≥rios", 
                ["comum", "premium"], format_func=lambda x: x.title())
            margem_lucro = st.slider("üí∞ Margem de Lucro (%)", 10, 50, 30)
            incluir_montagem = st.checkbox("üî® Incluir Montagem", value=True)
        
        # Bot√£o de an√°lise
        if uploaded_file and st.button("üöÄ Analisar Projeto", type="primary", use_container_width=True):
            processar_arquivo(uploaded_file, {
                'cliente': cliente,
                'ambiente': ambiente,
                'material': material,
                'qualidade_acessorios': qualidade_acessorios,
                'margem_lucro': margem_lucro,
                'incluir_montagem': incluir_montagem
            }, auth_manager, orcamento_engine, file_analyzer, usuario)
    
    with col2:
        mostrar_resumo_lateral()

def processar_arquivo(uploaded_file, configuracoes: Dict, auth_manager: AuthManager, 
                     orcamento_engine: OrcamentoEngine, file_analyzer: FileAnalyzer, usuario: Dict):
    """Processa arquivo e gera or√ßamento"""
    
    with st.spinner("üîÑ Analisando arquivo 3D..."):
        # Analisar arquivo
        sucesso, componentes, mensagem = file_analyzer.analisar_arquivo(uploaded_file)
        
        if not sucesso:
            st.error(f"‚ùå {mensagem}")
            return
        
        st.success(f"‚úÖ {mensagem}")
        
        # Gerar or√ßamento
        with st.spinner("üí∞ Calculando or√ßamento..."):
            try:
                orcamento = orcamento_engine.gerar_orcamento_completo(componentes, configuracoes)
                
                # Salvar projeto
                dados_projeto = {
                    'nome_projeto': f"Projeto {ambiente} - {datetime.now().strftime('%d/%m/%Y')}",
                    'cliente': configuracoes['cliente'],
                    'ambiente': configuracoes['ambiente'],
                    'material': configuracoes['material'],
                    'area_total': orcamento['resumo']['area_total'],
                    'valor_total': orcamento['resumo']['financeiro']['total_final'],
                    'arquivo_nome': uploaded_file.name
                }
                
                projeto_id = auth_manager.salvar_projeto(usuario['id'], dados_projeto)
                
                # Incrementar contador
                auth_manager.incrementar_projetos(usuario['id'])
                st.session_state.usuario_logado['projetos_mes'] += 1
                
                # Armazenar resultados
                st.session_state.orcamento_atual = orcamento
                st.session_state.componentes_atual = componentes
                st.session_state.projeto_id = projeto_id
                
                st.success("üéâ Or√ßamento gerado com sucesso!")
                
                # Mostrar resultados
                mostrar_resultados_orcamento(orcamento, componentes)
                
            except Exception as e:
                logger.error(f"Erro no processamento: {e}")
                st.error(f"‚ùå Erro no processamento: {str(e)}")

def mostrar_resultados_orcamento(orcamento: Dict, componentes: List[Dict]):
    """Exibe resultados do or√ßamento"""
    
    resumo = orcamento['resumo']
    
    # Tabs para diferentes visualiza√ß√µes
    tab1, tab2, tab3, tab4 = st.tabs(["üìä Resumo", "üîß Componentes", "üìà Gr√°ficos", "üìÑ Relat√≥rio"])
    
    with tab1:
        mostrar_resumo_financeiro(resumo)
    
    with tab2:
        mostrar_detalhes_componentes(orcamento['componentes'])
    
    with tab3:
        mostrar_graficos_orcamento(resumo, orcamento['componentes'])
    
    with tab4:
        mostrar_relatorio_completo(orcamento)

def mostrar_resumo_financeiro(resumo: Dict):
    """Exibe resumo financeiro"""
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <h4>üìê √Årea Total</h4>
            <h3>{resumo['area_total']:.2f} m¬≤</h3>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <h4>ü™µ Material</h4>
            <h3>R$ {resumo['material']['custo_total']:,.2f}</h3>
            <small>{resumo['material']['tipo']}</small>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <h4>üîß Servi√ßos</h4>
            <h3>R$ {resumo['servicos']['corte_usinagem'] + resumo['servicos']['mao_obra'] + resumo['servicos']['montagem']:,.2f}</h3>
            <small>Corte + M√£o de obra + Montagem</small>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="metric-card">
            <h4>üí∞ TOTAL FINAL</h4>
            <h2 style="color: {Config.CORES['primaria']};">R$ {resumo['financeiro']['total_final']:,.2f}</h2>
            <small>Margem: {resumo['financeiro']['margem_lucro_percent']:.0f}%</small>
        </div>
        """, unsafe_allow_html=True)

def mostrar_detalhes_componentes(componentes: List[Dict]):
    """Exibe detalhes dos componentes"""
    
    st.markdown("### üîß Detalhamento por Componente")
    
    # Criar DataFrame
    dados = []
    for comp in componentes:
        dados.append({
            'Componente': comp['nome'],
            'Tipo': comp['tipo'].title(),
            'Largura (m)': f"{comp['dimensoes']['largura']:.3f}",
            'Altura (m)': f"{comp['dimensoes']['altura']:.3f}",
            'Profundidade (m)': f"{comp['dimensoes']['profundidade']:.3f}",
            '√Årea (m¬≤)': f"{comp['area']:.3f}",
            'Material (R$)': f"{comp['custo_material']:.2f}",
            'Acess√≥rios (R$)': f"{comp['custo_acessorios']:.2f}",
            'Total (R$)': f"{comp['custo_total_componente']:.2f}"
        })
    
    df = pd.DataFrame(dados)
    st.dataframe(df, use_container_width=True)
    
    # Detalhes de acess√≥rios
    st.markdown("#### üî© Acess√≥rios por Componente")
    
    for comp in componentes:
        if comp['acessorios']:
            with st.expander(f"üîß {comp['nome']}"):
                for acess_nome, acess_info in comp['acessorios'].items():
                    st.markdown(f"""
                    **{acess_info['descricao']}**
                    - Quantidade: {acess_info['quantidade']}
                    - Pre√ßo unit√°rio: R$ {acess_info['preco_unitario']:.2f}
                    - Total: R$ {acess_info['quantidade'] * acess_info['preco_unitario']:.2f}
                    """)

def mostrar_graficos_orcamento(resumo: Dict, componentes: List[Dict]):
    """Exibe gr√°ficos do or√ßamento"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de pizza - Distribui√ß√£o de custos
        custos = {
            'Material': resumo['material']['custo_total'],
            'Acess√≥rios': resumo['acessorios']['custo_total'],
            'Corte/Usinagem': resumo['servicos']['corte_usinagem'],
            'M√£o de Obra': resumo['servicos']['mao_obra'],
            'Montagem': resumo['servicos']['montagem'],
            'Margem': resumo['financeiro']['valor_margem']
        }
        
        fig_pie = px.pie(
            values=list(custos.values()),
            names=list(custos.keys()),
            title="Distribui√ß√£o de Custos",
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        # Gr√°fico de barras - Custo por componente
        nomes = [comp['nome'] for comp in componentes]
        custos_comp = [comp['custo_total_componente'] for comp in componentes]
        
        fig_bar = px.bar(
            x=nomes,
            y=custos_comp,
            title="Custo por Componente",
            labels={'x': 'Componente', 'y': 'Custo (R$)'},
            color=custos_comp,
            color_continuous_scale='Blues'
        )
        fig_bar.update_xaxes(tickangle=45)
        st.plotly_chart(fig_bar, use_container_width=True)

def mostrar_relatorio_completo(orcamento: Dict):
    """Exibe relat√≥rio completo"""
    
    st.markdown("### üìÑ Relat√≥rio Completo")
    
    # Informa√ß√µes do projeto
    config = orcamento['configuracoes']
    resumo = orcamento['resumo']
    
    st.markdown(f"""
    **üìã Informa√ß√µes do Projeto**
    - **Cliente:** {config.get('cliente', 'N√£o informado')}
    - **Ambiente:** {config['ambiente']}
    - **Material:** {config['material']}
    - **Data:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
    - **Validade:** {orcamento['validade_dias']} dias
    """)
    
    # Resumo executivo
    st.markdown(f"""
    **üí∞ Resumo Executivo**
    - **√Årea Total:** {resumo['area_total']:.2f} m¬≤
    - **Valor por m¬≤:** R$ {resumo['financeiro']['total_final'] / resumo['area_total']:.2f}
    - **Subtotal:** R$ {resumo['financeiro']['subtotal']:,.2f}
    - **Margem de Lucro:** {resumo['financeiro']['margem_lucro_percent']:.0f}% (R$ {resumo['financeiro']['valor_margem']:,.2f})
    - **TOTAL FINAL:** R$ {resumo['financeiro']['total_final']:,.2f}
    """)
    
    # Observa√ß√µes
    st.markdown("**üìù Observa√ß√µes:**")
    for obs in orcamento['observacoes']:
        st.markdown(f"‚Ä¢ {obs}")
    
    # Exportar
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì• Exportar JSON", use_container_width=True):
            json_data = json.dumps(orcamento, indent=2, ensure_ascii=False)
            st.download_button(
                label="üíæ Download JSON",
                data=json_data,
                file_name=f"orcamento_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                mime="application/json"
            )
    
    with col2:
        if st.button("üìß Enviar por Email", use_container_width=True):
            st.info("üöÄ Em breve: Envio autom√°tico por email!")

def mostrar_resumo_lateral():
    """Exibe resumo na lateral"""
    
    if 'orcamento_atual' in st.session_state:
        orcamento = st.session_state.orcamento_atual
        resumo = orcamento['resumo']
        
        st.markdown("### üí∞ √öltimo Or√ßamento")
        
        st.markdown(f"""
        <div class="metric-card">
            <h4>üí∞ Valor Total</h4>
            <h3>R$ {resumo['financeiro']['total_final']:,.2f}</h3>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div class="metric-card">
            <h4>üìê √Årea</h4>
            <h3>{resumo['area_total']:.2f} m¬≤</h3>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div class="metric-card">
            <h4>üîß Componentes</h4>
            <h3>{len(st.session_state.componentes_atual)}</h3>
        </div>
        """, unsafe_allow_html=True)
        
    else:
        st.markdown("""
        <div style="text-align: center; padding: 2rem; color: #666;">
            <h3>üì§</h3>
            <p>Fa√ßa upload de um arquivo 3D</p>
            <p><small>Formatos: OBJ, DAE, STL, PLY</small></p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()

